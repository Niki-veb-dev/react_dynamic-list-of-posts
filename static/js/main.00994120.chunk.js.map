{"version":3,"sources":["api/posts.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["getPosts","uesrId","url","fetch","then","response","json","getPostDetails","postId","a","postDetails","getPostComments","comments","filteredComments","filter","comment","deleteComment","commentId","method","addComment","body","JSON","stringify","headers","PostsList","selectedUserId","selectedPostId","setSelectePostId","useState","posts","setPosts","loadData","useEffect","className","map","post","userId","type","onClick","id","NewCommentForm","handleAdd","name","email","state","setState","handleOnChange","event","target","value","placeholder","onChange","PostDetails","setPostDedails","setComments","isHidden","setHidden","Promise","all","postFromServer","commentsFromServer","handleDelete","title","length","classNames","hide","UserSelect","setSelectedUserId","App","setUserId","setPostId","ReactDOM","render","document","getElementById"],"mappings":"6UAAO,SAASA,EAASC,GACvB,IAAIC,EAAM,0CAMV,OAJe,IAAXD,IACFC,GAAG,kBAAeD,IAGbE,MAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGvC,SAAeC,EAAtB,kC,4CAAO,WAA8BC,GAA9B,iBAAAC,EAAA,6DACCP,EADD,kDACkDM,GADlD,SAEqBL,MAAMD,GAF3B,cAECQ,EAFD,yBAIEA,EAAYJ,QAJd,4C,sBAOA,SAAeK,EAAtB,kC,4CAAO,WAA+BH,GAA/B,iBAAAC,EAAA,4DACO,6CADP,SAEkBN,MADX,8CACsBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAFvD,cAECM,EAFD,OAGCC,EAAmBD,EAASE,QAAO,SAACC,GAAD,OACvCA,EAAQP,SAAWA,KAJhB,kBAOEK,GAPF,4C,sBAUA,SAAeG,EAAtB,kC,4CAAO,WAA6BC,GAA7B,eAAAR,EAAA,6DACCP,EADD,qDACqDe,GADrD,kBAGEd,MAAMD,EAAK,CAAEgB,OAAQ,YAHvB,4C,sBAMA,SAAeC,EAAtB,kC,4CAAO,WAA0BJ,GAA1B,SAAAN,EAAA,4DACO,6CADP,kBAGEN,MAFK,6CAEM,CAChBe,OAAQ,OACRE,KAAMC,KAAKC,UAAL,eAAoBP,IAC1BQ,QAAS,CACP,eAAgB,uBAPf,4C,uCCvBMC,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,eACAC,EAEI,EAFJA,eACAC,EACI,EADJA,iBAEA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAQ,uCAAG,sBAAAtB,EAAA,kEACfqB,EADe,SACA9B,EAASyB,GADT,6EAAH,qDAYd,OARAO,qBAAU,WACRD,MACC,IAEHC,qBAAU,WACRD,MACC,CAACN,IAGF,sBAAKQ,UAAU,YAAf,UACE,wCAEA,oBAAIA,UAAU,kBAAd,SACGJ,EAAMK,KAAI,SAAAC,GAAI,OACb,qBAAIF,UAAU,kBAAd,UACE,gCACE,8CACYE,EAAKC,QADjB,IAGG,OAJL,kEAQA,wBACEC,KAAK,SACLJ,UAAU,2BACVK,QAAS,kBAAMX,EAAiBQ,EAAKI,KAHvC,SAKGb,IAAmBS,EAAKI,GACrB,QACA,WAhB6BJ,EAAKI,a,uBC3BvCC,G,MAAkC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,UAAWf,EAAqB,EAArBA,eAC3D,EAA0BE,mBAAqB,CAC7Cc,KAAM,GACNC,MAAO,GACPvB,KAAM,GACNZ,OAAQ,IAJV,mBAAOoC,EAAP,KAAcC,EAAd,KAOMC,EAAiB,SAACC,GACtB,MAAwBA,EAAMC,OAAtBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MAEdJ,EAAS,2BACJD,GADG,kBAELF,EAAOO,MAUZ,OACE,uBAAMhB,UAAU,iBAAhB,UACE,qBAAKA,UAAU,aAAf,SACE,uBACEI,KAAK,OACLK,KAAK,OACLQ,YAAY,YACZjB,UAAU,wBACVkB,SAAUL,MAId,qBAAKb,UAAU,aAAf,SACE,uBACEI,KAAK,OACLK,KAAK,QACLQ,YAAY,aACZjB,UAAU,wBACVkB,SAAUL,MAId,qBAAKb,UAAU,aAAf,SACE,0BACES,KAAK,OACLQ,YAAY,oBACZjB,UAAU,wBACVkB,SAAUL,MAId,wBACET,KAAK,SACLJ,UAAU,uCACVK,QAxCiB,WACrB,IAAMH,EAAe,2BAAQS,GAAR,IAAepC,OAAQkB,IAE5Ce,EAAUN,IAkCR,gCClDOiB,G,MAA+B,SAAC,GAAwB,IAAtB1B,EAAqB,EAArBA,eAC7C,EAAsCE,mBAAS,IAA/C,mBAAOlB,EAAP,KAAoB2C,EAApB,KACA,EAAgCzB,mBAAS,IAAzC,mBAAOhB,EAAP,KAAiB0C,EAAjB,KACA,EAA8B1B,oBAAS,GAAvC,mBAAO2B,EAAP,KAAiBC,EAAjB,KAEMzB,EAAQ,uCAAG,kCAAAtB,EAAA,yDACQ,IAAnBiB,EADW,gCAEsC+B,QAAQC,IAAI,CAC7DnD,EAAemB,GACff,EAAgBe,KAJL,mCAENiC,EAFM,KAEUC,EAFV,KAObP,EAAeM,GACfL,EAAYM,GARC,2CAAH,qDAYd5B,qBAAU,WACRD,MACC,IAEHC,qBAAU,WACRD,MACC,CAACL,IAEJ,IAIMmC,EAAY,uCAAG,WAAO5C,GAAP,SAAAR,EAAA,sEACbO,EAAcC,GADD,OAEnBc,IAFmB,2CAAH,sDAKZU,EAAS,uCAAG,WAAO1B,GAAP,SAAAN,EAAA,sEACVU,EAAWJ,GADD,OAGhBgB,IAHgB,2CAAH,sDAMf,OACE,qBAAKE,UAAU,cAAf,SACsB,IAAnBP,EAEG,qCACE,+CACA,yBAASO,UAAU,oBAAnB,SACE,4BAAIvB,EAAYoD,UAElB,0BAAS7B,UAAU,wBAAnB,UACE,wBACEI,KAAK,SACLJ,UAAU,SACVK,QA5BW,WACvBkB,GAAWD,IAwBD,wBAKW3C,EAASmD,OALpB,eAQA,oBAAI9B,UAAU,oBAAd,SACGrB,EAASsB,KAAI,SAAAnB,GAAO,OACnB,qBAEEkB,UAAW+B,IACT,yBACA,CACEC,KAAMV,IALZ,UASE,wBACElB,KAAK,SACLJ,UAAU,oCACVK,QAAS,kBAAMuB,EAAa9C,EAAQwB,KAHtC,eAOA,4BAAIxB,EAAQK,SAfPL,EAAQwB,YAoBrB,kCACE,qBAAKN,UAAU,4BAAf,SACE,cAAC,EAAD,CAAgBQ,UAAWA,EAAWf,eAAgBA,WAK5D,uBC5FGwC,EAA8B,SAAC,GAA2C,IAAzCzC,EAAwC,EAAxCA,eAAgB0C,EAAwB,EAAxBA,kBAC5D,OACE,wBAAQlC,UAAU,cAAlB,SACE,kDAGE,yBACEA,UAAU,qBACVgB,MAAOxB,EACP0B,SAAUgB,EAHZ,UAKE,wBAAQlB,MAAM,IAAd,uBACA,wBAAQA,MAAM,IAAd,2BACA,wBAAQA,MAAM,IAAd,0BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,kCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,IAAd,sCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,KAAd,oCCrBGmB,EAAgB,WAC3B,MAA4BxC,mBAAS,GAArC,mBAAOQ,EAAP,KAAeiC,EAAf,KACA,EAAoCzC,mBAAS,GAA7C,mBAAOF,EAAP,KAAuB4C,EAAvB,KAgBA,OACE,sBAAKrC,UAAU,MAAf,UACE,cAAC,EAAD,CAAYR,eAAgBW,EAAQ+B,kBARd,SAACpB,GACzB,IAAMtB,GAAkBsB,EAAMC,OAAOC,MAErCoB,EAAU5C,MAMR,uBAAMQ,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACER,eAAgBW,EAChBT,iBArBe,SAACnB,GAEtB8D,EADE5C,IAAmBlB,EACX,EAEAA,IAkBJkB,eAAgBA,MAIpB,qBAAKO,UAAU,eAAf,SACE,cAAC,EAAD,CAAaP,eAAgBA,aCnCvC6C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.00994120.chunk.js","sourcesContent":["export function getPosts(uesrId: number): Promise<Post[]> {\n  let url = 'https://mate.academy/students-api/posts';\n\n  if (uesrId !== 0) {\n    url += `?userId=${uesrId}`;\n  }\n\n  return fetch(url).then(response => response.json());\n}\n\nexport async function getPostDetails(postId: number): Promise<Post> {\n  const url = `https://mate.academy/students-api/posts/${postId}`;\n  const postDetails = await fetch(url);\n\n  return postDetails.json();\n}\n\nexport async function getPostComments(postId: number): Promise<Comment[]> {\n  const url = 'https://mate.academy/students-api/comments';\n  const comments = await fetch(url).then(response => response.json());\n  const filteredComments = comments.filter((comment: { postId: number; }) => (\n    comment.postId === postId\n  ));\n\n  return filteredComments;\n}\n\nexport async function deleteComment(commentId: number) {\n  const url = `https://mate.academy/students-api/comments/${commentId}`;\n\n  return fetch(url, { method: 'DELETE' });\n}\n\nexport async function addComment(comment: NewComment) {\n  const url = 'https://mate.academy/students-api/comments';\n\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({ ...comment }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n}\n","import React, { useEffect, useState } from 'react';\nimport { getPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedUserId: number,\n  selectedPostId: number,\n  setSelectePostId: (postId: number) => void\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  selectedPostId,\n  setSelectePostId,\n}) => {\n  const [posts, setPosts] = useState([] as Post[]);\n\n  const loadData = async () => {\n    setPosts(await getPosts(selectedUserId));\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    loadData();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`User #${post.userId}`}\n                :\n                {' '}\n              </b>\n              sunt aut facere repellat provident occaecati excepturi optio\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => setSelectePostId(post.id)}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  handleAdd: (comment: NewComment) => void\n  selectedPostId: number\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ handleAdd, selectedPostId }) => {\n  const [state, setState] = useState<NewComment>({\n    name: '',\n    email: '',\n    body: '',\n    postId: 0,\n  });\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const handleOnSubmit = () => {\n    const post:NewComment = { ...state, postId: selectedPostId };\n\n    handleAdd(post);\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleOnChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleOnChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleOnChange}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={handleOnSubmit}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport {\n  addComment, deleteComment, getPostComments, getPostDetails,\n} from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [postDetails, setPostDedails] = useState({} as Post);\n  const [comments, setComments] = useState([] as Comment[]);\n  const [isHidden, setHidden] = useState(false);\n\n  const loadData = async () => {\n    if (selectedPostId !== 0) {\n      const [postFromServer, commentsFromServer] = await Promise.all([\n        getPostDetails(selectedPostId),\n        getPostComments(selectedPostId),\n      ]);\n\n      setPostDedails(postFromServer);\n      setComments(commentsFromServer);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    loadData();\n  }, [selectedPostId]);\n\n  const handleVisabiliti = () => {\n    setHidden(!isHidden);\n  };\n\n  const handleDelete = async (commentId: number) => {\n    await deleteComment(commentId);\n    loadData();\n  };\n\n  const handleAdd = async (comment: NewComment) => {\n    await addComment(comment);\n\n    loadData();\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {selectedPostId !== 0\n        ? (\n          <>\n            <h2>Post details:</h2>\n            <section className=\"PostDetails__post\">\n              <p>{postDetails.title}</p>\n            </section>\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={handleVisabiliti}\n              >\n                {`Hide ${comments.length} comments`}\n              </button>\n\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    key={comment.id}\n                    className={classNames(\n                      'PostDetails__list-item',\n                      {\n                        hide: isHidden,\n                      },\n                    )}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            </section>\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm handleAdd={handleAdd} selectedPostId={selectedPostId} />\n              </div>\n            </section>\n          </>\n        )\n        : 'No post selected'}\n    </div>\n  );\n};\n","import React from 'react';\n\n/* eslint-disable jsx-a11y/label-has-associated-control */\ntype Props = {\n  selectedUserId: number\n  setSelectedUserId: (event: React.ChangeEvent<HTMLSelectElement>) => void\n};\n\nexport const UserSelect: React.FC<Props> = ({ selectedUserId, setSelectedUserId }) => {\n  return (\n    <header className=\"App__header\">\n      <label>\n        Select a user\n\n        <select\n          className=\"App__user-selector\"\n          value={selectedUserId}\n          onChange={setSelectedUserId}\n        >\n          <option value=\"0\">All users</option>\n          <option value=\"1\">Leanne Graham</option>\n          <option value=\"2\">Ervin Howell</option>\n          <option value=\"3\">Clementine Bauch</option>\n          <option value=\"4\">Patricia Lebsack</option>\n          <option value=\"5\">Chelsey Dietrich</option>\n          <option value=\"6\">Mrs. Dennis Schulist</option>\n          <option value=\"7\">Kurtis Weissnat</option>\n          <option value=\"8\">Nicholas Runolfsdottir V</option>\n          <option value=\"9\">Glenna Reichert</option>\n          <option value=\"10\">Leanne Graham</option>\n        </select>\n      </label>\n    </header>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nexport const App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setPostId] = useState(0);\n\n  const setSelectePostId = (postId : number) => {\n    if (selectedPostId === postId) {\n      setPostId(0);\n    } else {\n      setPostId(postId);\n    }\n  };\n\n  const setSelectedUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedUserId = +event.target.value;\n\n    setUserId(selectedUserId);\n  };\n\n  return (\n    <div className=\"App\">\n      <UserSelect selectedUserId={userId} setSelectedUserId={setSelectedUserId} />\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={userId}\n            setSelectePostId={setSelectePostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails selectedPostId={selectedPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}